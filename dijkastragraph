#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;
class Edge{
    public:
    int dest;
    int wt;
    Edge(int destination,int weight){
        dest=destination;
        wt=weight;
    }

};
class Graph{
    public:
    int node;
    vector<vector<Edge>> arr;
    Graph(int nodes){
        node=nodes;
        arr.resize(nodes);

    }
    void addEdge(int sc,int dest,int wt){
        arr[sc].push_back(Edge(dest,wt));
         arr[dest].push_back(Edge(sc,wt));
    }
    void dijkastra(int start){
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> que;
        vector<int> dis( node, INT16_MAX);
        dis[start]=0;
        que.push({0,start});
        while (!que.empty()){
            int curr=que.top().second;
            que.pop();
            for (Edge edge :arr[curr])
            {
                int adjnode=edge.dest;
                int wt=edge.wt;
                if (dis[curr]+wt<dis[adjnode])  
                {
                    dis[adjnode]=dis[curr]+wt;
                    que.push(make_pair(dis[adjnode],adjnode));
                } 
            }   
        }
         cout << "Shortest distances from node " << start << ":\n";
        for (int i = 0; i < node; i++) {
            cout << "Node " << i << " -> Distance: " << dis[i] << endl;
        }
    }
     
};
int main(){
    Graph g(5);
    g.addEdge(0, 1, 7);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 6);
    g.addEdge(0, 4, 4); 
    g.addEdge(4, 0, 2);
    g.dijkastra(0);
    return 0;
}
